package dsa.graph

object GraphMain extends App {
  val directedGraph: DirectedGraph[String] = DirectedGraph[String]().addNodes(List("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"))
    .addEdge("a", "b")
    .addEdge("a", "c")
    .addEdge("b", "d")
    .addEdge("b", "e")
    .addEdge("c", "d")
    .addEdge("e", "f")
    .addEdge("e", "g")
    .addEdge("h", "i")
    .addEdge("i", "j")
    .addEdge("j", "h")
  println(directedGraph)

  println("----------------------------------------")
  val unDirectedGraph: UndirectedGraph[String] = UndirectedGraph[String]().addNodes(List("a", "b", "c", "d", "e", "f", "g", "h", "i", "j"))
    .addEdge("a", "b")
    .addEdge("a", "c")
    .addEdge("b", "d")
    .addEdge("b", "e")
    .addEdge("c", "d")
    .addEdge("e", "f")
    .addEdge("e", "g")
    .addEdge("h", "i")
    .addEdge("i", "j")
    .addEdge("j", "h")
  println(unDirectedGraph)

  println(Graph.bfs(directedGraph, "a"))
  println(Graph.bfs(unDirectedGraph, "a"))
  println(Graph.bfs(unDirectedGraph, "b"))
  println(Graph.bfs(unDirectedGraph, "b"))

  println(Graph.dfs(directedGraph, "a"))
  println(Graph.dfs(unDirectedGraph, "a"))
  println(Graph.dfs(directedGraph, "b"))
  println(Graph.dfs(unDirectedGraph, "b"))

  val anotherUndirectedGraph: UndirectedGraph[String] = UndirectedGraph[String]().addNodes(List("a", "b", "c", "d", "e", "f", "g"))
    .addEdge("a", "b")
    .addEdge("a", "c")
    .addEdge("b", "d")
    .addEdge("b", "e")
    .addEdge("c", "d")
    .addEdge("e", "f")
    .addEdge("e", "g")
  println(Graph.isCyclic(graph = anotherUndirectedGraph))
}
